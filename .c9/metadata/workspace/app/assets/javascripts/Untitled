{"changed":true,"filter":false,"title":"Untitled","tooltip":"/app/assets/javascripts/Untitled","value":"###\n#  Video Lightning - v3.0.6\n#  Turn any element into a lightbox or popover link for Youtube and Vimeo videos.\n#  https://github.com/musocrat/jquery-video-lightning/\n#\n#  Made by Andrew Carpenter @ Musocrat\n#  Published under MIT License\n###\n\n(->\n\n  bind = (fn, me) ->\n    ->\n      fn.apply me, arguments\n\n  do (document) ->\n    VideoLightning = undefined\n    _bitify = undefined\n    _boolify = undefined\n    _cc = undefined\n    _coverEl = undefined\n    _domStr = undefined\n    _extObj = undefined\n    _fadeCss = undefined\n    _fadeIn = undefined\n    _fadeOut = undefined\n    _frameCss = undefined\n    _fullHex = undefined\n    _getEl = undefined\n    _gravity = undefined\n    _initYTAPI = undefined\n    _isAry = undefined\n    _isElAry = undefined\n    _isObj = undefined\n    _isStr = undefined\n    _postToVM = undefined\n    _prepHex = undefined\n    _randar = undefined\n    _setSrc = undefined\n    _testEl = undefined\n    _topKeyOfObj = undefined\n    _val = undefined\n    _wrapCss = undefined\n    _wrapCssP = undefined\n    _ytReset = undefined\n    dom = undefined\n    videoLightning = undefined\n    dom = document\n    videoLightning = ((_this) ->\n      (obj) ->\n        de = undefined\n        domEls = undefined\n        e = undefined\n        el = undefined\n        els = undefined\n        i = undefined\n        j = undefined\n        l = undefined\n        len = undefined\n        len1 = undefined\n        len2 = undefined\n        len3 = undefined\n        m = undefined\n        noElErr = undefined\n        optEls = undefined\n        pushRawEls = undefined\n        rawEls = undefined\n        settings = undefined\n\n        noElErr = ->\n          console.error 'VideoLightning was initialized without elements.'\n          return\n\n        optEls = obj.elements or obj.element\n        if !optEls\n          return noElErr()\n        rawEls = []\n        els = []\n\n        pushRawEls = (e) ->\n          `var el`\n          el = undefined\n          if _isStr(e)\n            rawEls.push\n              el: e\n              opts: null\n          else\n            el = _topKeyOfObj(e)\n            rawEls.push\n              el: el\n              opts: e[el] or null\n\n        if _isAry(optEls)\n          i = 0\n          len = optEls.length\n          while i < len\n            e = optEls[i]\n            pushRawEls e\n            i++\n        else\n          pushRawEls optEls\n        j = 0\n        len1 = rawEls.length\n        while j < len1\n          el = rawEls[j]\n          if domEls = _getEl(el.el)\n            if _isElAry(domEls)\n                            l = 0\n              len2 = domEls.length\n              while l < len2\n                de = domEls[l]\n                els.push\n                  el: de\n                  opts: el.opts\n                l++\n            else\n              els.push\n                el: domEls\n                opts: el.opts\n          j++\n        if els.length == 0\n          return noElErr()\n        settings = obj.settings or {}\n        m = 0\n        len3 = els.length\n        while m < len3\n          el = els[m]\n          if el\n            _this.vlData.instances.push new VideoLightning(el, settings)\n          m++\n        _initYTAPI()\n        return\n    )(this)\n    VideoLightning = do ->\n      `var VideoLightning`\n\n      VideoLightning = (elObj, opts) ->\n        @elObj = elObj\n        @vmStop = bind(@vmStop, this)\n        @vmPlay = bind(@vmPlay, this)\n        @vmListen = bind(@vmListen, this)\n        @initPlayerVM = bind(@initPlayerVM, this)\n        @coverYT = bind(@coverYT, this)\n        @ytState = bind(@ytState, this)\n        @ytStop = bind(@ytStop, this)\n        @ytPlay = bind(@ytPlay, this)\n        @setYTPlayer = bind(@setYTPlayer, this)\n        @initPlayerYT = bind(@initPlayerYT, this)\n        @cover = bind(@cover, this)\n        @hide = bind(@hide, this)\n        @show = bind(@show, this)\n        @clear = bind(@clear, this)\n        @stop = bind(@stop, this)\n        @play = bind(@play, this)\n        @peek = bind(@peek, this)\n        @hovered = bind(@hovered, this)\n        @clicked = bind(@clicked, this)\n        @regEvents = bind(@regEvents, this)\n        @resize = bind(@resize, this)\n        @popoverPos = bind(@popoverPos, this)\n        @buildEls = bind(@buildEls, this)\n        @buildOpts = bind(@buildOpts, this)\n        @opts = _extObj({}, opts)\n        @inst = _randar()\n        @el = @elObj.el\n        @buildOpts()\n        @buildEls()\n        if _boolify(@opts.cover, false)\n          @cover()\n        @regEvents()\n        return\n\n      VideoLightning::buildOpts = ->\n        base = undefined\n        base1 = undefined\n        elDataSet = undefined\n        i = undefined\n        j = undefined\n        k = undefined\n        key = undefined\n        len = undefined\n        len1 = undefined\n        name = undefined\n        normalize = undefined\n        ref = undefined\n        remap = undefined\n        results = undefined\n        v = undefined\n        remap = [\n          [\n            'backdrop_color'\n            'bdColor'\n          ]\n          [\n            'backdrop_opacity'\n            'bdOpacity'\n          ]\n          [\n            'ease_in'\n            'fadeIn'\n          ]\n          [\n            'ease_out'\n            'fadeOut'\n          ]\n          [\n            'glow_color'\n            'glowColor'\n          ]\n          [\n            'start_time'\n            'startTime'\n          ]\n          [\n            'z_index'\n            'zIndex'\n          ]\n          [\n            'rick_roll'\n            'rickRoll'\n          ]\n          [\n            'iv_load_policy'\n            'ivLoadPolicy'\n          ]\n        ]\n        _extObj @opts, @elObj.opts\n        elDataSet = @el.dataset or []\n        if elDataSet.length == 0\n          ref = [\n            'id'\n            'width'\n            'height'\n          ]\n          i = 0\n          len = ref.length\n          while i < len\n            k = ref[i]\n            v = @el.getAttribute('data-video-' + k)\n            if v\n              elDataSet[k] = v\n            i++\n        normalize = ((_this) ->\n          (k, v) ->\n            _this.opts[k.replace(/^video(.)(.*)/, (a, b, c) ->\n              b.toLowerCase() + c\n            )] = v\n        )(this)\n        for k of elDataSet\n          `k = k`\n          v = elDataSet[k]\n          normalize k, v\n        @opts.width = if @opts.width then parseInt(@opts.width, 10) else 640\n        @opts.height = if @opts.height then parseInt(@opts.height, 10) else 390\n        if (base = @opts).id == null\n          base.id = 'y-dQw4w9WgXcQ'\n        if @opts.id.match(/^v/)\n          @vendor = 'vimeo'\n          @vm = true\n        else if @opts.id.match(/^f/)\n          @vendor = 'iframe'\n          @ifr = true\n        else\n          @vendor = 'youtube'\n          @yt = true\n        window.vlData[@vendor] = true\n        @id = @opts.id.replace(/([vyf]-)/i, '')\n        results = []\n        j = 0\n        len1 = remap.length\n        while j < len1\n          key = remap[j]\n          results.push if (base1 = @opts)[name = key[1]] != null then base1[name] else (base1[name] = @opts[key[0]])\n          j++\n        results\n\n      VideoLightning::buildEls = ->\n        bdbg = undefined\n        bdc = undefined\n        bdo = undefined\n        fdim = undefined\n        fglo = undefined\n        fmar = undefined\n        frameCss = undefined\n        g = undefined\n        wrapCss = undefined\n        xCss = undefined\n        (@target = dom.createElement('span')).className = 'video-target'\n        @el.parentNode.insertBefore @target, @el\n        @target.appendChild @el\n        bdc = _cc(_val(@opts.bdColor, '#ddd'))\n        bdo = _val(@opts.bdOpacity, 0.6)\n        bdbg = 'background: rgba(' + bdc.r + ', ' + bdc.g + ', ' + bdc.b + ', ' + bdo + ');'\n        fdim = 'width: ' + @opts.width + 'px; height: ' + @opts.height + 'px;'\n        fmar = 'margin-top: -' + @opts.height / 2 + 'px; margin-left: -' + @opts.width / 2 + 'px;'\n        fglo = 'box-shadow: 0px 0px ' + (g = _val(@opts.glow, 20)) + 'px ' + g / 5 + 'px ' + _fullHex(_val(@opts.glowColor, '#000')) + ';'\n        wrapCss = if _boolify(@opts.popover, false) then _wrapCssP(@opts.width, @opts.height) else _wrapCss\n        xCss = 'background: ' + _fullHex(_val(@opts.xBgColor, '#000')) + '; color: ' + _fullHex(_val(@opts.xColor, '#fff')) + '; border: ' + _val(@opts.xBorder, 'none') + '; box-sizing: border-box;'\n        frameCss = 'background: ' + _fullHex(_val(@opts.frameColor, '#000')) + '; border: ' + _val(@opts.frameBorder, 'none') + '; box-sizing: border-box;'\n        @target.insertAdjacentHTML 'beforeend', _domStr(\n          tag: 'div'\n          attrs:\n            id: 'wrap_' + @inst\n            'class': 'video-wrapper'\n            style: wrapCss + ' ' + bdbg + ' z-index: ' + _val(@opts.zIndex, 2100) + '; opacity: 0;'\n          children: [ {\n            tag: 'div'\n            attrs:\n              'class': 'video-frame'\n              style: _frameCss + ' ' + fdim + ' ' + fmar + ' ' + fglo\n            children: [ {\n              tag: 'div'\n              attrs: 'class': 'video'\n              children: [\n                {\n                  tag: 'div'\n                  inner: '&times;'\n                  attrs:\n                    id: 'close_' + @inst\n                    'class': 'video-close'\n                    style: 'float: right; margin-right: -34px; ' + fglo + ' ' + xCss + ' padding: 0 10px 0 12px; font-size: 25px;'\n                }\n                {\n                  tag: 'iframe'\n                  attrs:\n                    type: 'text/html'\n                    id: 'iframe_' + @inst\n                    'class': 'video-iframe'\n                    style: 'position: absolute; top: 0; left: 0; ' + frameCss\n                }\n              ]\n            } ]\n          } ])\n        @wrapper = dom.getElementById('wrap_' + @inst)\n        @iframe = dom.getElementById('iframe_' + @inst)\n        @close = dom.getElementById('close_' + @inst)\n\n      VideoLightning::popoverPos = ->\n        pos = undefined\n        pos = _gravity(@target, @opts.width, @opts.height, @opts.fluidity)\n        @wrapper.style.left = pos.x + 'px'\n        @wrapper.style.top = pos.y + 'px'\n\n      VideoLightning::resize = ->\n        throttleOff = undefined\n        if !window.vlData.throttle\n          @popoverPos()\n          if @opts.throttle\n            window.vlData.throttle = true\n\n            throttleOff = ->\n              window.vlData.throttle = false\n\n            return setTimeout(throttleOff, @opts.throttle)\n        return\n\n      VideoLightning::regEvents = ->\n        @target.style.cursor = 'pointer'\n        @target.addEventListener 'mouseup', @clicked, false\n        if _boolify(@opts.popover, false)\n          window.addEventListener 'resize', @resize, false\n          window.addEventListener 'scroll', @resize, false\n          window.addEventListener 'orientationchange', @resize, false\n          if @opts.peek\n            @target.addEventListener 'mouseenter', @hovered, false\n            return @target.addEventListener('mouseleave', @hovered, false)\n        return\n\n      VideoLightning::clicked = (e) ->\n        if @peeking\n          return @peek(false, true)\n        if e.buttons and e.buttons != 1 or e.which and e.which != 1 or e.button and e.button != 1\n          return\n        if @playing\n          @stop()\n        else\n          @play()\n\n      VideoLightning::hovered = (e) ->\n        if e.type == 'mouseenter' and !@playing\n          @peek()\n        if e.type == 'mouseleave' and @playing\n          return @peek(@peeking)\n        return\n\n      VideoLightning::peek = (close, pin) ->\n        if close == null\n          close = false\n        if pin == null\n          pin = false\n        if !@peeking and @playing\n          return\n        @close.innerHTML = if close or pin then '&times;' else '&#94;'\n        @peeking = ! ! !(close or pin)\n        if close\n          @stop()\n        else if pin\n          null\n        else\n          @play()\n\n      VideoLightning::play = ->\n        if _boolify(@opts.popover, false)\n          @popoverPos()\n        @show()\n        if @ifr\n          _setSrc @iframe,\n            url: encodeURI(@id)\n            attrs:\n              width: @opts.width\n              height: @opts.height\n              frameBorder: 0\n        else if @ready and !@playing and @iframe.src != 'about:blank'\n          if @yt\n            @ytPlay()\n          if @vm\n            @vmPlay()\n        else if !@playing\n          if @vm\n            @initPlayerVM()\n          if @yt\n            @initPlayerYT()\n        @playing = true\n        if @clearAfter\n          window.clearTimeout @clearAfter\n        return\n\n      VideoLightning::stop = (fade) ->\n        if fade == null\n          fade = 0\n        if _boolify(@opts.rickRoll, false)\n          return\n        @hide fade\n        if @ready\n          if @yt\n            @ytStop()\n          if @vm\n            @vmStop()\n        else\n          @clear()\n        @playing = false\n        if _boolify(@opts.unload, true)\n          @clearAfter = window.setTimeout(@clear, (_val(@opts.unloadAfter) or 45) * 1000)\n        return\n\n      VideoLightning::clear = ->\n        @iframe.src = 'about:blank'\n        return\n\n      VideoLightning::show = ->\n        _fadeIn @wrapper, _val(@opts.fadeIn, 300)\n        return\n\n      VideoLightning::hide = (fade) ->\n        if fade == null\n          fade = 0\n        _fadeOut @wrapper, _val(@opts.fadeOut, fade)\n        return\n\n      VideoLightning::cover = ->\n        if @yt\n          @coverYT()\n        return\n\n      VideoLightning::initPlayerYT = ->\n        _setSrc @iframe,\n          url: location.protocol + '//www.youtube.com/embed/' + @id\n          params:\n            enablejsapi: 1\n            autoplay: _bitify(@opts.autoplay, 1)\n            autohide: _val(@opts.autohide, 2)\n            cc_load_policy: _val(@opts.ccLoadPolicy, 0)\n            color: _val(@opts.color, null)\n            controls: _val(@opts.controls, 2)\n            disablekb: _val(@opts.disablekb, 0)\n            end: _val(@opts.endTime, null)\n            fs: _val(@opts.fs, 1)\n            hl: _val(@opts.hl, 'en')\n            iv_load_policy: _val(@opts.ivLoadPolicy, 1)\n            list: _val(@opts.list, null)\n            listType: _val(@opts.listType, null)\n            loop: _val(@opts.loop, 0)\n            modestbranding: _val(@opts.modestbranding, 0)\n            origin: encodeURIComponent(_val(@opts.origin, location.protocol + '//' + location.host))\n            playerapiid: @inst\n            playlist: _val(@opts.playlist, null)\n            playsinline: _val(@opts.playsinline, 0)\n            rel: _val(@opts.rel, 0)\n            showinfo: _val(@opts.showinfo, 1)\n            start: _val(@opts.startTime, 0)\n            theme: _val(@opts.theme, null)\n          attrs:\n            width: @opts.width\n            height: @opts.height\n            frameBorder: 0\n        @iframe.setAttribute 'allowFullScreen', ''\n        if window.vlData.ytAPIReady\n          return @setYTPlayer()\n        return\n\n      VideoLightning::setYTPlayer = ->\n        ready = undefined\n        ready = ((_this) ->\n          ->\n            _this.ready = true\n        )(this)\n        if @ytPlayer != null then @ytPlayer else (@ytPlayer = new (YT.Player)('iframe_' + @inst, events:\n          onReady: ready\n          onStateChange: @ytState))\n\n      VideoLightning::ytPlay = ->\n        @ytPlayer.playVideo()\n\n      VideoLightning::ytStop = ->\n        _ytReset @ytPlayer, @opts.startTime\n        @ytPlayer.stopVideo()\n        @ytPlayer.clearVideo()\n\n      VideoLightning::ytState = (e) ->\n        if e.data == 0 and _boolify(@opts.autoclose, true)\n          return @stop(_val(@opts.fadeOut, 1000))\n        return\n\n      VideoLightning::coverYT = ->\n        @ytCover = _coverEl(@target, '//img.youtube.com/vi/' + @id + '/hqdefault.jpg')\n        return\n\n      VideoLightning::initPlayerVM = ->\n        _setSrc @iframe,\n          url: location.protocol + '//player.vimeo.com/video/' + @id\n          params:\n            autoplay: _bitify(@opts.autoplay, 1)\n            loop: _val(@opts.loop, 0)\n            title: _val(@opts.showinfo, 1)\n            byline: _val(@opts.byline, 1)\n            portrait: _val(@opts.portrait, 1)\n            color: _prepHex(_val(@opts.color, '#00adef'))\n            api: 1\n            player_id: @inst\n          attrs:\n            width: @opts.width\n            height: @opts.height\n            frameBorder: 0\n        @iframe.setAttribute 'allowFullScreen', ''\n        window.addEventListener 'message', @vmListen, false\n        if @vmPlayer != null then @vmPlayer else (@vmPlayer = @iframe)\n\n      VideoLightning::vmListen = (msg) ->\n        data = undefined\n        data = JSON.parse(msg.data)\n        if data.player_id != @inst\n          return\n        switch data.event\n          when 'ready'\n            @ready = true\n            _postToVM @vmPlayer, @id, 'addEventListener', 'finish'\n          when 'finish'\n            @stop 1000\n        return\n\n      VideoLightning::vmPlay = ->\n        _postToVM @vmPlayer, @id, 'play'\n        return\n\n      VideoLightning::vmStop = ->\n        _postToVM @vmPlayer, @id, 'pause'\n        return\n\n      VideoLightning\n\n    _val = (p, d) ->\n      if p == false or p == 'false' or p == 0 or p == '0'\n        p\n      else\n        p or d\n\n    _bitify = (p, d) ->\n      if p == false or p == 'false' or p == 0 or p == '0'\n        0\n      else if p == true or p == 'true' or p == '1' or p == 1\n        1\n      else\n        d\n\n    _boolify = (p, d) ->\n      if p == false or p == 'false' or p == 0 or p == '0'\n        false\n      else\n        ! !p or d\n\n    _domStr = (o) ->\n      attrs = undefined\n      c = undefined\n      children = undefined\n      i = undefined\n      k = undefined\n      len = undefined\n      ref = undefined\n      ref1 = undefined\n      v = undefined\n      attrs = ''\n      children = ''\n      if o.attrs\n        ref = o.attrs\n        for k of ref\n          `k = k`\n          v = ref[k]\n          attrs += ' ' + k + '=\"' + v + '\"'\n      if o.children\n        ref1 = o.children\n        i = 0\n        len = ref1.length\n        while i < len\n          c = ref1[i]\n          children += if _isObj(c) then _domStr(c) else c\n          i++\n      '<' + o.tag + attrs + '>' + (o.inner or children) + '</' + o.tag + '>'\n\n    _setSrc = (el, o) ->\n      k = undefined\n      ref = undefined\n      ref1 = undefined\n      results = undefined\n      src = undefined\n      v = undefined\n      src = o.url + '?'\n      ref = o.params\n      for k of ref\n        `k = k`\n        v = ref[k]\n        if v != null\n          src += '&' + k + '=' + v\n      el.src = src.replace(/&/, '')\n      ref1 = o.attrs\n      results = []\n      for k of ref1\n        `k = k`\n        v = ref1[k]\n        results.push el[k] = v\n      results\n\n    _extObj = (baseObj, extObj) ->\n      k = undefined\n      v = undefined\n      for k of extObj\n        `k = k`\n        v = extObj[k]\n        baseObj[k] = v\n      baseObj\n\n    _isStr = (obj) ->\n      typeof obj == 'string'\n\n    _isAry = (obj) ->\n      obj instanceof Array\n\n    _isElAry = (obj) ->\n      obj instanceof HTMLCollection or obj instanceof NodeList\n\n    _isObj = (obj) ->\n      obj != null and typeof obj == 'object'\n\n    _topKeyOfObj = (obj) ->\n      k = undefined\n      v = undefined\n      for k of obj\n        `k = k`\n        v = obj[k]\n        return k\n      return\n\n    _getEl = (el) ->\n      els = undefined\n      els = if el.charAt(0) == '#' then dom.getElementById(el.substr(1)) else dom.getElementsByClassName(el.substr(1))\n      if _isAry(els) and els.length == 0\n        null\n      else\n        els\n\n    _randar = ->\n      (Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2)).substring 0, 16\n\n    _prepHex = (hex) ->\n      hex = hex.replace(/^#/, '')\n      if hex.length == 3\n        '' + hex + hex\n      else\n        hex\n\n    _fullHex = (hex) ->\n      if hex == 'transparent'\n        hex\n      else\n        '#' + _prepHex(hex)\n\n    _cc = (hex) ->\n      {\n        r: parseInt(_prepHex(hex).substring(0, 2), 16)\n        g: parseInt(_prepHex(hex).substring(2, 4), 16)\n        b: parseInt(_prepHex(hex).substring(4, 6), 16)\n      }\n\n    _wrapCss = 'display: none; position: fixed; min-width: 100%; min-height: 100%; top: 0; right: 0; bottom: 0; left: 0;'\n\n    _wrapCssP = (w, h) ->\n      'display: none; position: fixed; width: ' + w + 'px; height: ' + h + 'px;'\n\n    _frameCss = 'position: absolute; top: 50%; left: 50%; background: #000000;'\n\n    _fadeCss = (el, t) ->\n      el.style.transition = el.style.mozTransition = el.style.webkitTransition = 'opacity ' + t + 'ms ease'\n\n    _fadeIn = (el, t) ->\n      applyFade = undefined\n      _fadeCss el, t\n      el.style.display = 'block'\n\n      applyFade = ->\n        el.style.opacity = 1\n\n      setTimeout applyFade, 20\n\n    _fadeOut = (el, t) ->\n      applyFade = undefined\n      _fadeCss el, t\n      el.style.opacity = 0\n\n      applyFade = ->\n        el.style.display = 'none'\n\n      setTimeout applyFade, t\n\n    _initYTAPI = ->\n      scriptA = undefined\n      vFuncs = undefined\n      vScript = undefined\n      if dom.getElementById('ytScript')\n        return\n      scriptA = dom.getElementsByTagName('script')[0]\n      vFuncs = document.createElement('script')\n      vFuncs.innerHTML = 'function onYouTubeIframeAPIReady() {vlData.ytReady()};'\n      scriptA.parentNode.insertBefore vFuncs, scriptA\n      vScript = document.createElement('script')\n      vScript.id = 'ytScript'\n      vScript.async = true\n      vScript.src = location.protocol + '//www.youtube.com/iframe_api'\n      vFuncs.parentNode.insertBefore vScript, vFuncs.nextSibling\n      return\n\n    _ytReset = (p, s) ->\n      if s == null\n        s = 0\n      if p.getDuration() - 3 < p.getCurrentTime()\n        p.pauseVideo()\n        p.seekTo s, false\n      return\n\n    _postToVM = (player, id, k, v) ->\n      data = undefined\n      if v == null\n        v = null\n      data = if v then\n        method: k\n        value: v else method: k\n      player.contentWindow.postMessage JSON.stringify(data), location.protocol + '//youtube.com/watch?v=' + id\n\n    _coverEl = (target, src) ->\n      cover = undefined\n      cover = dom.createElement('img')\n      cover.className = 'video-cover'\n      cover.src = src\n      target.appendChild cover\n      cover\n\n    _testEl = ->\n      test = undefined\n      if !(test = document.getElementById('vl-size-test'))\n        test = document.createElement('div')\n        test.id = 'vl-size-test'\n        test.style.cssText = 'position:fixed;top:0;left:0;bottom:0;right:0;visibility:hidden;'\n        document.body.appendChild test\n      {\n        width: test.offsetWidth\n        height: test.offsetHeight\n      }\n\n    _gravity = (el, width, height, fluidity) ->\n      box_center = undefined\n      center = undefined\n      coords = undefined\n      i = undefined\n      j = undefined\n      page_height = undefined\n      page_width = undefined\n      points = undefined\n      ref = undefined\n      ref1 = undefined\n      ref2 = undefined\n      ref3 = undefined\n      ref4 = undefined\n      ref5 = undefined\n      sort = undefined\n      x = undefined\n      y = undefined\n      if fluidity == null\n        fluidity = 30\n      coords = el.getBoundingClientRect()\n      center =\n        x: (page_width = _testEl().width) / 2\n        y: (page_height = _testEl().height) / 2\n      box_center =\n        x: width / 2\n        y: height / 2\n      points = []\n      x = i = ref = coords.left\n      ref1 = coords.right + width\n      ref2 = fluidity\n      while if ref2 > 0 then i <= ref1 else i >= ref1\n        points.push [\n          x - width\n          coords.top - height\n        ]\n        points.push [\n          x - width\n          coords.bottom\n        ]\n        x = i += ref2\n      y = j = ref3 = coords.top\n      ref4 = coords.bottom + height\n      ref5 = fluidity\n      while if ref5 > 0 then j <= ref4 else j >= ref4\n        points.push [\n          coords.left - width\n          y - height\n        ]\n        points.push [\n          coords.right\n          y - height\n        ]\n        y = j += ref5\n\n      sort = (a, b) ->\n        ary = undefined\n        dax = undefined\n        day = undefined\n        l = undefined\n        len = undefined\n        obja = undefined\n        objb = undefined\n        ref6 = undefined\n        ref6 = [\n          [\n            a\n            obja = {}\n          ]\n          [\n            b\n            objb = {}\n          ]\n        ]\n        l = 0\n        len = ref6.length\n        while l < len\n          ary = ref6[l]\n          x = ary[0][0]\n          y = ary[0][1]\n          ary[1].diffx = if (dax = x + box_center.x) > center.x then dax - (center.x) else center.x - dax\n          ary[1].diffy = if (day = y + box_center.y) > center.y then day - (center.y) else center.y - day\n          ary[1].diff = ary[1].diffx + ary[1].diffy\n          if x < 0 or x + width > page_width\n            ary[1].diff += 10000\n          if y < 0 or y + height > page_height\n            ary[1].diff += 10000\n          l++\n        obja.diff - (objb.diff)\n\n      points.sort sort\n      {\n        x: parseInt(if (x = points[0][0]) < 0 or x + width > page_width then center.x - (box_center.x) else x, 10)\n        y: parseInt(if (y = points[0][1]) < 0 or y + height > page_height then center.y - (box_center.y) else y, 10)\n      }\n\n    @videoLightning = videoLightning\n    @vlData = {}\n    @vlData.instances = []\n    @vlData.ytReady = ((_this) ->\n      ->\n        _this.vlData.ytAPIReady = true\n    )(this)\n    @vlData.youtube = @vlData.vimeo = false\n    if typeof $ != 'undefined'\n      return\n      $.fn.jqueryVideoLightning = (options) ->\n        @each ->\n          inst = undefined\n          if !$.data(this, 'plugin_jqueryVideoLightning')\n            inst = new VideoLightning(\n              el: this\n              opts: options)\n            vlData.instances.push inst\n            $.data this, 'plugin_jqueryVideoLightning', inst\n          return\n        _initYTAPI()\n\nreturn\n  return\n).call this\n## sourceMappingURL=videoLightning.js.map\n\n# ---\n# generated by js2coffee 2.1.0","undoManager":{"mark":-2,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":910,"column":30},"action":"insert","lines":["###","#  Video Lightning - v3.0.6","#  Turn any element into a lightbox or popover link for Youtube and Vimeo videos.","#  https://github.com/musocrat/jquery-video-lightning/","#","#  Made by Andrew Carpenter @ Musocrat","#  Published under MIT License","###","","(->","","  bind = (fn, me) ->","    ->","      fn.apply me, arguments","","  do (document) ->","    VideoLightning = undefined","    _bitify = undefined","    _boolify = undefined","    _cc = undefined","    _coverEl = undefined","    _domStr = undefined","    _extObj = undefined","    _fadeCss = undefined","    _fadeIn = undefined","    _fadeOut = undefined","    _frameCss = undefined","    _fullHex = undefined","    _getEl = undefined","    _gravity = undefined","    _initYTAPI = undefined","    _isAry = undefined","    _isElAry = undefined","    _isObj = undefined","    _isStr = undefined","    _postToVM = undefined","    _prepHex = undefined","    _randar = undefined","    _setSrc = undefined","    _testEl = undefined","    _topKeyOfObj = undefined","    _val = undefined","    _wrapCss = undefined","    _wrapCssP = undefined","    _ytReset = undefined","    dom = undefined","    videoLightning = undefined","    dom = document","    videoLightning = ((_this) ->","      (obj) ->","        de = undefined","        domEls = undefined","        e = undefined","        el = undefined","        els = undefined","        i = undefined","        j = undefined","        l = undefined","        len = undefined","        len1 = undefined","        len2 = undefined","        len3 = undefined","        m = undefined","        noElErr = undefined","        optEls = undefined","        pushRawEls = undefined","        rawEls = undefined","        settings = undefined","","        noElErr = ->","          console.error 'VideoLightning was initialized without elements.'","          return","","        optEls = obj.elements or obj.element","        if !optEls","          return noElErr()","        rawEls = []","        els = []","","        pushRawEls = (e) ->","          `var el`","          el = undefined","          if _isStr(e)","            rawEls.push","              el: e","              opts: null","          else","            el = _topKeyOfObj(e)","            rawEls.push","              el: el","              opts: e[el] or null","","        if _isAry(optEls)","          i = 0","          len = optEls.length","          while i < len","            e = optEls[i]","            pushRawEls e","            i++","        else","          pushRawEls optEls","        j = 0","        len1 = rawEls.length","        while j < len1","          el = rawEls[j]","          if domEls = _getEl(el.el)","            if _isElAry(domEls)","                            l = 0","              len2 = domEls.length","              while l < len2","                de = domEls[l]","                els.push","                  el: de","                  opts: el.opts","                l++","            else","              els.push","                el: domEls","                opts: el.opts","          j++","        if els.length == 0","          return noElErr()","        settings = obj.settings or {}","        m = 0","        len3 = els.length","        while m < len3","          el = els[m]","          if el","            _this.vlData.instances.push new VideoLightning(el, settings)","          m++","        _initYTAPI()","        return","    )(this)","    VideoLightning = do ->","      `var VideoLightning`","","      VideoLightning = (elObj, opts) ->","        @elObj = elObj","        @vmStop = bind(@vmStop, this)","        @vmPlay = bind(@vmPlay, this)","        @vmListen = bind(@vmListen, this)","        @initPlayerVM = bind(@initPlayerVM, this)","        @coverYT = bind(@coverYT, this)","        @ytState = bind(@ytState, this)","        @ytStop = bind(@ytStop, this)","        @ytPlay = bind(@ytPlay, this)","        @setYTPlayer = bind(@setYTPlayer, this)","        @initPlayerYT = bind(@initPlayerYT, this)","        @cover = bind(@cover, this)","        @hide = bind(@hide, this)","        @show = bind(@show, this)","        @clear = bind(@clear, this)","        @stop = bind(@stop, this)","        @play = bind(@play, this)","        @peek = bind(@peek, this)","        @hovered = bind(@hovered, this)","        @clicked = bind(@clicked, this)","        @regEvents = bind(@regEvents, this)","        @resize = bind(@resize, this)","        @popoverPos = bind(@popoverPos, this)","        @buildEls = bind(@buildEls, this)","        @buildOpts = bind(@buildOpts, this)","        @opts = _extObj({}, opts)","        @inst = _randar()","        @el = @elObj.el","        @buildOpts()","        @buildEls()","        if _boolify(@opts.cover, false)","          @cover()","        @regEvents()","        return","","      VideoLightning::buildOpts = ->","        base = undefined","        base1 = undefined","        elDataSet = undefined","        i = undefined","        j = undefined","        k = undefined","        key = undefined","        len = undefined","        len1 = undefined","        name = undefined","        normalize = undefined","        ref = undefined","        remap = undefined","        results = undefined","        v = undefined","        remap = [","          [","            'backdrop_color'","            'bdColor'","          ]","          [","            'backdrop_opacity'","            'bdOpacity'","          ]","          [","            'ease_in'","            'fadeIn'","          ]","          [","            'ease_out'","            'fadeOut'","          ]","          [","            'glow_color'","            'glowColor'","          ]","          [","            'start_time'","            'startTime'","          ]","          [","            'z_index'","            'zIndex'","          ]","          [","            'rick_roll'","            'rickRoll'","          ]","          [","            'iv_load_policy'","            'ivLoadPolicy'","          ]","        ]","        _extObj @opts, @elObj.opts","        elDataSet = @el.dataset or []","        if elDataSet.length == 0","          ref = [","            'id'","            'width'","            'height'","          ]","          i = 0","          len = ref.length","          while i < len","            k = ref[i]","            v = @el.getAttribute('data-video-' + k)","            if v","              elDataSet[k] = v","            i++","        normalize = ((_this) ->","          (k, v) ->","            _this.opts[k.replace(/^video(.)(.*)/, (a, b, c) ->","              b.toLowerCase() + c","            )] = v","        )(this)","        for k of elDataSet","          `k = k`","          v = elDataSet[k]","          normalize k, v","        @opts.width = if @opts.width then parseInt(@opts.width, 10) else 640","        @opts.height = if @opts.height then parseInt(@opts.height, 10) else 390","        if (base = @opts).id == null","          base.id = 'y-dQw4w9WgXcQ'","        if @opts.id.match(/^v/)","          @vendor = 'vimeo'","          @vm = true","        else if @opts.id.match(/^f/)","          @vendor = 'iframe'","          @ifr = true","        else","          @vendor = 'youtube'","          @yt = true","        window.vlData[@vendor] = true","        @id = @opts.id.replace(/([vyf]-)/i, '')","        results = []","        j = 0","        len1 = remap.length","        while j < len1","          key = remap[j]","          results.push if (base1 = @opts)[name = key[1]] != null then base1[name] else (base1[name] = @opts[key[0]])","          j++","        results","","      VideoLightning::buildEls = ->","        bdbg = undefined","        bdc = undefined","        bdo = undefined","        fdim = undefined","        fglo = undefined","        fmar = undefined","        frameCss = undefined","        g = undefined","        wrapCss = undefined","        xCss = undefined","        (@target = dom.createElement('span')).className = 'video-target'","        @el.parentNode.insertBefore @target, @el","        @target.appendChild @el","        bdc = _cc(_val(@opts.bdColor, '#ddd'))","        bdo = _val(@opts.bdOpacity, 0.6)","        bdbg = 'background: rgba(' + bdc.r + ', ' + bdc.g + ', ' + bdc.b + ', ' + bdo + ');'","        fdim = 'width: ' + @opts.width + 'px; height: ' + @opts.height + 'px;'","        fmar = 'margin-top: -' + @opts.height / 2 + 'px; margin-left: -' + @opts.width / 2 + 'px;'","        fglo = 'box-shadow: 0px 0px ' + (g = _val(@opts.glow, 20)) + 'px ' + g / 5 + 'px ' + _fullHex(_val(@opts.glowColor, '#000')) + ';'","        wrapCss = if _boolify(@opts.popover, false) then _wrapCssP(@opts.width, @opts.height) else _wrapCss","        xCss = 'background: ' + _fullHex(_val(@opts.xBgColor, '#000')) + '; color: ' + _fullHex(_val(@opts.xColor, '#fff')) + '; border: ' + _val(@opts.xBorder, 'none') + '; box-sizing: border-box;'","        frameCss = 'background: ' + _fullHex(_val(@opts.frameColor, '#000')) + '; border: ' + _val(@opts.frameBorder, 'none') + '; box-sizing: border-box;'","        @target.insertAdjacentHTML 'beforeend', _domStr(","          tag: 'div'","          attrs:","            id: 'wrap_' + @inst","            'class': 'video-wrapper'","            style: wrapCss + ' ' + bdbg + ' z-index: ' + _val(@opts.zIndex, 2100) + '; opacity: 0;'","          children: [ {","            tag: 'div'","            attrs:","              'class': 'video-frame'","              style: _frameCss + ' ' + fdim + ' ' + fmar + ' ' + fglo","            children: [ {","              tag: 'div'","              attrs: 'class': 'video'","              children: [","                {","                  tag: 'div'","                  inner: '&times;'","                  attrs:","                    id: 'close_' + @inst","                    'class': 'video-close'","                    style: 'float: right; margin-right: -34px; ' + fglo + ' ' + xCss + ' padding: 0 10px 0 12px; font-size: 25px;'","                }","                {","                  tag: 'iframe'","                  attrs:","                    type: 'text/html'","                    id: 'iframe_' + @inst","                    'class': 'video-iframe'","                    style: 'position: absolute; top: 0; left: 0; ' + frameCss","                }","              ]","            } ]","          } ])","        @wrapper = dom.getElementById('wrap_' + @inst)","        @iframe = dom.getElementById('iframe_' + @inst)","        @close = dom.getElementById('close_' + @inst)","","      VideoLightning::popoverPos = ->","        pos = undefined","        pos = _gravity(@target, @opts.width, @opts.height, @opts.fluidity)","        @wrapper.style.left = pos.x + 'px'","        @wrapper.style.top = pos.y + 'px'","","      VideoLightning::resize = ->","        throttleOff = undefined","        if !window.vlData.throttle","          @popoverPos()","          if @opts.throttle","            window.vlData.throttle = true","","            throttleOff = ->","              window.vlData.throttle = false","","            return setTimeout(throttleOff, @opts.throttle)","        return","","      VideoLightning::regEvents = ->","        @target.style.cursor = 'pointer'","        @target.addEventListener 'mouseup', @clicked, false","        if _boolify(@opts.popover, false)","          window.addEventListener 'resize', @resize, false","          window.addEventListener 'scroll', @resize, false","          window.addEventListener 'orientationchange', @resize, false","          if @opts.peek","            @target.addEventListener 'mouseenter', @hovered, false","            return @target.addEventListener('mouseleave', @hovered, false)","        return","","      VideoLightning::clicked = (e) ->","        if @peeking","          return @peek(false, true)","        if e.buttons and e.buttons != 1 or e.which and e.which != 1 or e.button and e.button != 1","          return","        if @playing","          @stop()","        else","          @play()","","      VideoLightning::hovered = (e) ->","        if e.type == 'mouseenter' and !@playing","          @peek()","        if e.type == 'mouseleave' and @playing","          return @peek(@peeking)","        return","","      VideoLightning::peek = (close, pin) ->","        if close == null","          close = false","        if pin == null","          pin = false","        if !@peeking and @playing","          return","        @close.innerHTML = if close or pin then '&times;' else '&#94;'","        @peeking = ! ! !(close or pin)","        if close","          @stop()","        else if pin","          null","        else","          @play()","","      VideoLightning::play = ->","        if _boolify(@opts.popover, false)","          @popoverPos()","        @show()","        if @ifr","          _setSrc @iframe,","            url: encodeURI(@id)","            attrs:","              width: @opts.width","              height: @opts.height","              frameBorder: 0","        else if @ready and !@playing and @iframe.src != 'about:blank'","          if @yt","            @ytPlay()","          if @vm","            @vmPlay()","        else if !@playing","          if @vm","            @initPlayerVM()","          if @yt","            @initPlayerYT()","        @playing = true","        if @clearAfter","          window.clearTimeout @clearAfter","        return","","      VideoLightning::stop = (fade) ->","        if fade == null","          fade = 0","        if _boolify(@opts.rickRoll, false)","          return","        @hide fade","        if @ready","          if @yt","            @ytStop()","          if @vm","            @vmStop()","        else","          @clear()","        @playing = false","        if _boolify(@opts.unload, true)","          @clearAfter = window.setTimeout(@clear, (_val(@opts.unloadAfter) or 45) * 1000)","        return","","      VideoLightning::clear = ->","        @iframe.src = 'about:blank'","        return","","      VideoLightning::show = ->","        _fadeIn @wrapper, _val(@opts.fadeIn, 300)","        return","","      VideoLightning::hide = (fade) ->","        if fade == null","          fade = 0","        _fadeOut @wrapper, _val(@opts.fadeOut, fade)","        return","","      VideoLightning::cover = ->","        if @yt","          @coverYT()","        return","","      VideoLightning::initPlayerYT = ->","        _setSrc @iframe,","          url: location.protocol + '//www.youtube.com/embed/' + @id","          params:","            enablejsapi: 1","            autoplay: _bitify(@opts.autoplay, 1)","            autohide: _val(@opts.autohide, 2)","            cc_load_policy: _val(@opts.ccLoadPolicy, 0)","            color: _val(@opts.color, null)","            controls: _val(@opts.controls, 2)","            disablekb: _val(@opts.disablekb, 0)","            end: _val(@opts.endTime, null)","            fs: _val(@opts.fs, 1)","            hl: _val(@opts.hl, 'en')","            iv_load_policy: _val(@opts.ivLoadPolicy, 1)","            list: _val(@opts.list, null)","            listType: _val(@opts.listType, null)","            loop: _val(@opts.loop, 0)","            modestbranding: _val(@opts.modestbranding, 0)","            origin: encodeURIComponent(_val(@opts.origin, location.protocol + '//' + location.host))","            playerapiid: @inst","            playlist: _val(@opts.playlist, null)","            playsinline: _val(@opts.playsinline, 0)","            rel: _val(@opts.rel, 0)","            showinfo: _val(@opts.showinfo, 1)","            start: _val(@opts.startTime, 0)","            theme: _val(@opts.theme, null)","          attrs:","            width: @opts.width","            height: @opts.height","            frameBorder: 0","        @iframe.setAttribute 'allowFullScreen', ''","        if window.vlData.ytAPIReady","          return @setYTPlayer()","        return","","      VideoLightning::setYTPlayer = ->","        ready = undefined","        ready = ((_this) ->","          ->","            _this.ready = true","        )(this)","        if @ytPlayer != null then @ytPlayer else (@ytPlayer = new (YT.Player)('iframe_' + @inst, events:","          onReady: ready","          onStateChange: @ytState))","","      VideoLightning::ytPlay = ->","        @ytPlayer.playVideo()","","      VideoLightning::ytStop = ->","        _ytReset @ytPlayer, @opts.startTime","        @ytPlayer.stopVideo()","        @ytPlayer.clearVideo()","","      VideoLightning::ytState = (e) ->","        if e.data == 0 and _boolify(@opts.autoclose, true)","          return @stop(_val(@opts.fadeOut, 1000))","        return","","      VideoLightning::coverYT = ->","        @ytCover = _coverEl(@target, '//img.youtube.com/vi/' + @id + '/hqdefault.jpg')","        return","","      VideoLightning::initPlayerVM = ->","        _setSrc @iframe,","          url: location.protocol + '//player.vimeo.com/video/' + @id","          params:","            autoplay: _bitify(@opts.autoplay, 1)","            loop: _val(@opts.loop, 0)","            title: _val(@opts.showinfo, 1)","            byline: _val(@opts.byline, 1)","            portrait: _val(@opts.portrait, 1)","            color: _prepHex(_val(@opts.color, '#00adef'))","            api: 1","            player_id: @inst","          attrs:","            width: @opts.width","            height: @opts.height","            frameBorder: 0","        @iframe.setAttribute 'allowFullScreen', ''","        window.addEventListener 'message', @vmListen, false","        if @vmPlayer != null then @vmPlayer else (@vmPlayer = @iframe)","","      VideoLightning::vmListen = (msg) ->","        data = undefined","        data = JSON.parse(msg.data)","        if data.player_id != @inst","          return","        switch data.event","          when 'ready'","            @ready = true","            _postToVM @vmPlayer, @id, 'addEventListener', 'finish'","          when 'finish'","            @stop 1000","        return","","      VideoLightning::vmPlay = ->","        _postToVM @vmPlayer, @id, 'play'","        return","","      VideoLightning::vmStop = ->","        _postToVM @vmPlayer, @id, 'pause'","        return","","      VideoLightning","","    _val = (p, d) ->","      if p == false or p == 'false' or p == 0 or p == '0'","        p","      else","        p or d","","    _bitify = (p, d) ->","      if p == false or p == 'false' or p == 0 or p == '0'","        0","      else if p == true or p == 'true' or p == '1' or p == 1","        1","      else","        d","","    _boolify = (p, d) ->","      if p == false or p == 'false' or p == 0 or p == '0'","        false","      else","        ! !p or d","","    _domStr = (o) ->","      attrs = undefined","      c = undefined","      children = undefined","      i = undefined","      k = undefined","      len = undefined","      ref = undefined","      ref1 = undefined","      v = undefined","      attrs = ''","      children = ''","      if o.attrs","        ref = o.attrs","        for k of ref","          `k = k`","          v = ref[k]","          attrs += ' ' + k + '=\"' + v + '\"'","      if o.children","        ref1 = o.children","        i = 0","        len = ref1.length","        while i < len","          c = ref1[i]","          children += if _isObj(c) then _domStr(c) else c","          i++","      '<' + o.tag + attrs + '>' + (o.inner or children) + '</' + o.tag + '>'","","    _setSrc = (el, o) ->","      k = undefined","      ref = undefined","      ref1 = undefined","      results = undefined","      src = undefined","      v = undefined","      src = o.url + '?'","      ref = o.params","      for k of ref","        `k = k`","        v = ref[k]","        if v != null","          src += '&' + k + '=' + v","      el.src = src.replace(/&/, '')","      ref1 = o.attrs","      results = []","      for k of ref1","        `k = k`","        v = ref1[k]","        results.push el[k] = v","      results","","    _extObj = (baseObj, extObj) ->","      k = undefined","      v = undefined","      for k of extObj","        `k = k`","        v = extObj[k]","        baseObj[k] = v","      baseObj","","    _isStr = (obj) ->","      typeof obj == 'string'","","    _isAry = (obj) ->","      obj instanceof Array","","    _isElAry = (obj) ->","      obj instanceof HTMLCollection or obj instanceof NodeList","","    _isObj = (obj) ->","      obj != null and typeof obj == 'object'","","    _topKeyOfObj = (obj) ->","      k = undefined","      v = undefined","      for k of obj","        `k = k`","        v = obj[k]","        return k","      return","","    _getEl = (el) ->","      els = undefined","      els = if el.charAt(0) == '#' then dom.getElementById(el.substr(1)) else dom.getElementsByClassName(el.substr(1))","      if _isAry(els) and els.length == 0","        null","      else","        els","","    _randar = ->","      (Math.random().toString(36).slice(2) + Math.random().toString(36).slice(2)).substring 0, 16","","    _prepHex = (hex) ->","      hex = hex.replace(/^#/, '')","      if hex.length == 3","        '' + hex + hex","      else","        hex","","    _fullHex = (hex) ->","      if hex == 'transparent'","        hex","      else","        '#' + _prepHex(hex)","","    _cc = (hex) ->","      {","        r: parseInt(_prepHex(hex).substring(0, 2), 16)","        g: parseInt(_prepHex(hex).substring(2, 4), 16)","        b: parseInt(_prepHex(hex).substring(4, 6), 16)","      }","","    _wrapCss = 'display: none; position: fixed; min-width: 100%; min-height: 100%; top: 0; right: 0; bottom: 0; left: 0;'","","    _wrapCssP = (w, h) ->","      'display: none; position: fixed; width: ' + w + 'px; height: ' + h + 'px;'","","    _frameCss = 'position: absolute; top: 50%; left: 50%; background: #000000;'","","    _fadeCss = (el, t) ->","      el.style.transition = el.style.mozTransition = el.style.webkitTransition = 'opacity ' + t + 'ms ease'","","    _fadeIn = (el, t) ->","      applyFade = undefined","      _fadeCss el, t","      el.style.display = 'block'","","      applyFade = ->","        el.style.opacity = 1","","      setTimeout applyFade, 20","","    _fadeOut = (el, t) ->","      applyFade = undefined","      _fadeCss el, t","      el.style.opacity = 0","","      applyFade = ->","        el.style.display = 'none'","","      setTimeout applyFade, t","","    _initYTAPI = ->","      scriptA = undefined","      vFuncs = undefined","      vScript = undefined","      if dom.getElementById('ytScript')","        return","      scriptA = dom.getElementsByTagName('script')[0]","      vFuncs = document.createElement('script')","      vFuncs.innerHTML = 'function onYouTubeIframeAPIReady() {vlData.ytReady()};'","      scriptA.parentNode.insertBefore vFuncs, scriptA","      vScript = document.createElement('script')","      vScript.id = 'ytScript'","      vScript.async = true","      vScript.src = location.protocol + '//www.youtube.com/iframe_api'","      vFuncs.parentNode.insertBefore vScript, vFuncs.nextSibling","      return","","    _ytReset = (p, s) ->","      if s == null","        s = 0","      if p.getDuration() - 3 < p.getCurrentTime()","        p.pauseVideo()","        p.seekTo s, false","      return","","    _postToVM = (player, id, k, v) ->","      data = undefined","      if v == null","        v = null","      data = if v then","        method: k","        value: v else method: k","      player.contentWindow.postMessage JSON.stringify(data), location.protocol + '//youtube.com/watch?v=' + id","","    _coverEl = (target, src) ->","      cover = undefined","      cover = dom.createElement('img')","      cover.className = 'video-cover'","      cover.src = src","      target.appendChild cover","      cover","","    _testEl = ->","      test = undefined","      if !(test = document.getElementById('vl-size-test'))","        test = document.createElement('div')","        test.id = 'vl-size-test'","        test.style.cssText = 'position:fixed;top:0;left:0;bottom:0;right:0;visibility:hidden;'","        document.body.appendChild test","      {","        width: test.offsetWidth","        height: test.offsetHeight","      }","","    _gravity = (el, width, height, fluidity) ->","      box_center = undefined","      center = undefined","      coords = undefined","      i = undefined","      j = undefined","      page_height = undefined","      page_width = undefined","      points = undefined","      ref = undefined","      ref1 = undefined","      ref2 = undefined","      ref3 = undefined","      ref4 = undefined","      ref5 = undefined","      sort = undefined","      x = undefined","      y = undefined","      if fluidity == null","        fluidity = 30","      coords = el.getBoundingClientRect()","      center =","        x: (page_width = _testEl().width) / 2","        y: (page_height = _testEl().height) / 2","      box_center =","        x: width / 2","        y: height / 2","      points = []","      x = i = ref = coords.left","      ref1 = coords.right + width","      ref2 = fluidity","      while if ref2 > 0 then i <= ref1 else i >= ref1","        points.push [","          x - width","          coords.top - height","        ]","        points.push [","          x - width","          coords.bottom","        ]","        x = i += ref2","      y = j = ref3 = coords.top","      ref4 = coords.bottom + height","      ref5 = fluidity","      while if ref5 > 0 then j <= ref4 else j >= ref4","        points.push [","          coords.left - width","          y - height","        ]","        points.push [","          coords.right","          y - height","        ]","        y = j += ref5","","      sort = (a, b) ->","        ary = undefined","        dax = undefined","        day = undefined","        l = undefined","        len = undefined","        obja = undefined","        objb = undefined","        ref6 = undefined","        ref6 = [","          [","            a","            obja = {}","          ]","          [","            b","            objb = {}","          ]","        ]","        l = 0","        len = ref6.length","        while l < len","          ary = ref6[l]","          x = ary[0][0]","          y = ary[0][1]","          ary[1].diffx = if (dax = x + box_center.x) > center.x then dax - (center.x) else center.x - dax","          ary[1].diffy = if (day = y + box_center.y) > center.y then day - (center.y) else center.y - day","          ary[1].diff = ary[1].diffx + ary[1].diffy","          if x < 0 or x + width > page_width","            ary[1].diff += 10000","          if y < 0 or y + height > page_height","            ary[1].diff += 10000","          l++","        obja.diff - (objb.diff)","","      points.sort sort","      {","        x: parseInt(if (x = points[0][0]) < 0 or x + width > page_width then center.x - (box_center.x) else x, 10)","        y: parseInt(if (y = points[0][1]) < 0 or y + height > page_height then center.y - (box_center.y) else y, 10)","      }","","    @videoLightning = videoLightning","    @vlData = {}","    @vlData.instances = []","    @vlData.ytReady = ((_this) ->","      ->","        _this.vlData.ytAPIReady = true","    )(this)","    @vlData.youtube = @vlData.vimeo = false","    if typeof $ != 'undefined'","      return","      $.fn.jqueryVideoLightning = (options) ->","        @each ->","          inst = undefined","          if !$.data(this, 'plugin_jqueryVideoLightning')","            inst = new VideoLightning(","              el: this","              opts: options)","            vlData.instances.push inst","            $.data this, 'plugin_jqueryVideoLightning', inst","          return","        _initYTAPI()","","return","  return",").call this","## sourceMappingURL=videoLightning.js.map","","# ---","# generated by js2coffee 2.1.0"],"id":1}]]},"ace":{"folds":[],"scrolltop":16054,"scrollleft":0,"selection":{"start":{"row":910,"column":30},"end":{"row":910,"column":30},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":890,"state":"start","mode":"ace/mode/text"}},"timestamp":1447647988124}